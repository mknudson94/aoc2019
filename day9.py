aubreys_input = [1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1101,0,3,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1101,0,1,1021,1101,28,0,1010,1101,36,0,1002,1101,0,39,1014,1101,34,0,1018,1101,0,32,1001,1102,22,1,1017,1102,1,26,1000,1102,1,27,1013,1101,829,0,1022,1102,29,1,1005,1102,1,681,1024,1102,1,510,1029,1101,0,676,1025,1101,31,0,1016,1101,0,716,1027,1101,0,38,1019,1102,21,1,1009,1102,1,0,1020,1102,1,33,1012,1102,1,723,1026,1101,826,0,1023,1101,0,23,1003,1101,0,37,1008,1101,35,0,1007,1102,24,1,1015,1101,25,0,1011,1101,0,30,1004,1101,20,0,1006,1102,519,1,1028,109,19,21102,40,1,-4,1008,1015,40,63,1005,63,203,4,187,1106,0,207,1001,64,1,64,1002,64,2,64,109,-12,21108,41,41,8,1005,1015,229,4,213,1001,64,1,64,1105,1,229,1002,64,2,64,109,6,21107,42,43,4,1005,1017,247,4,235,1105,1,251,1001,64,1,64,1002,64,2,64,109,-8,1201,2,0,63,1008,63,37,63,1005,63,271,1105,1,277,4,257,1001,64,1,64,1002,64,2,64,109,-4,2102,1,0,63,1008,63,32,63,1005,63,299,4,283,1105,1,303,1001,64,1,64,1002,64,2,64,109,2,1208,2,29,63,1005,63,325,4,309,1001,64,1,64,1106,0,325,1002,64,2,64,109,18,1206,0,341,1001,64,1,64,1106,0,343,4,331,1002,64,2,64,109,-19,2101,0,4,63,1008,63,20,63,1005,63,365,4,349,1105,1,369,1001,64,1,64,1002,64,2,64,109,10,1207,-4,38,63,1005,63,391,4,375,1001,64,1,64,1106,0,391,1002,64,2,64,109,-5,21107,43,42,5,1005,1012,407,1106,0,413,4,397,1001,64,1,64,1002,64,2,64,109,1,2102,1,-2,63,1008,63,19,63,1005,63,433,1106,0,439,4,419,1001,64,1,64,1002,64,2,64,109,12,1205,0,455,1001,64,1,64,1105,1,457,4,445,1002,64,2,64,109,-9,1206,9,475,4,463,1001,64,1,64,1105,1,475,1002,64,2,64,109,7,21102,44,1,1,1008,1019,43,63,1005,63,495,1106,0,501,4,481,1001,64,1,64,1002,64,2,64,109,11,2106,0,-1,4,507,1001,64,1,64,1106,0,519,1002,64,2,64,109,-27,21101,45,0,9,1008,1011,47,63,1005,63,543,1001,64,1,64,1106,0,545,4,525,1002,64,2,64,109,-7,1202,5,1,63,1008,63,25,63,1005,63,569,1001,64,1,64,1105,1,571,4,551,1002,64,2,64,109,15,2107,22,-1,63,1005,63,591,1001,64,1,64,1105,1,593,4,577,1002,64,2,64,109,4,2108,33,-7,63,1005,63,609,1105,1,615,4,599,1001,64,1,64,1002,64,2,64,109,2,21101,46,0,0,1008,1016,46,63,1005,63,637,4,621,1106,0,641,1001,64,1,64,1002,64,2,64,109,-6,2101,0,-2,63,1008,63,40,63,1005,63,661,1106,0,667,4,647,1001,64,1,64,1002,64,2,64,109,14,2105,1,0,4,673,1105,1,685,1001,64,1,64,1002,64,2,64,109,-16,1207,-5,22,63,1005,63,701,1106,0,707,4,691,1001,64,1,64,1002,64,2,64,109,15,2106,0,4,1001,64,1,64,1105,1,725,4,713,1002,64,2,64,109,-21,1202,3,1,63,1008,63,29,63,1005,63,751,4,731,1001,64,1,64,1106,0,751,1002,64,2,64,109,7,1201,-5,0,63,1008,63,30,63,1005,63,773,4,757,1105,1,777,1001,64,1,64,1002,64,2,64,109,-10,2107,25,1,63,1005,63,799,4,783,1001,64,1,64,1105,1,799,1002,64,2,64,109,15,1205,7,817,4,805,1001,64,1,64,1106,0,817,1002,64,2,64,109,6,2105,1,3,1106,0,835,4,823,1001,64,1,64,1002,64,2,64,109,-16,21108,47,45,8,1005,1012,851,1106,0,857,4,841,1001,64,1,64,1002,64,2,64,109,1,1208,4,18,63,1005,63,877,1001,64,1,64,1106,0,879,4,863,1002,64,2,64,109,-1,2108,21,5,63,1005,63,901,4,885,1001,64,1,64,1106,0,901,4,64,99,21101,27,0,1,21101,915,0,0,1105,1,922,21201,1,37229,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2,-1,1,21101,942,0,0,1105,1,922,21201,1,0,-1,21201,-2,-3,1,21101,0,957,0,1105,1,922,22201,1,-1,-2,1105,1,968,22101,0,-2,-2,109,-3,2105,1,0]


ADDITTIONAL_MEMORY = 10000

def intcode(p):
	# ops = [1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1102,3,1,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1102,1,0,1020,1101,0,23,1010,1102,1,31,1009,1101,34,0,1019,1102,38,1,1004,1101,29,0,1017,1102,1,25,1018,1102,20,1,1005,1102,1,24,1008,1101,897,0,1024,1101,0,28,1016,1101,1,0,1021,1101,0,879,1028,1102,1,35,1012,1101,0,36,1015,1101,311,0,1026,1102,1,37,1011,1101,26,0,1014,1101,21,0,1006,1102,1,32,1002,1102,1,33,1003,1102,27,1,1001,1102,1,667,1022,1101,0,892,1025,1101,664,0,1023,1101,30,0,1000,1101,304,0,1027,1101,22,0,1013,1102,1,874,1029,1102,1,39,1007,109,12,21108,40,41,1,1005,1013,201,1001,64,1,64,1106,0,203,4,187,1002,64,2,64,109,5,1205,4,221,4,209,1001,64,1,64,1106,0,221,1002,64,2,64,109,5,21108,41,41,-5,1005,1017,243,4,227,1001,64,1,64,1106,0,243,1002,64,2,64,109,-30,2101,0,8,63,1008,63,30,63,1005,63,269,4,249,1001,64,1,64,1105,1,269,1002,64,2,64,109,15,2101,0,-5,63,1008,63,35,63,1005,63,293,1001,64,1,64,1106,0,295,4,275,1002,64,2,64,109,28,2106,0,-8,1001,64,1,64,1105,1,313,4,301,1002,64,2,64,109,-22,1205,7,329,1001,64,1,64,1106,0,331,4,319,1002,64,2,64,109,-12,1208,6,37,63,1005,63,351,1001,64,1,64,1106,0,353,4,337,1002,64,2,64,109,-3,2108,21,8,63,1005,63,375,4,359,1001,64,1,64,1106,0,375,1002,64,2,64,109,14,1201,-5,0,63,1008,63,39,63,1005,63,401,4,381,1001,64,1,64,1105,1,401,1002,64,2,64,109,17,1206,-9,419,4,407,1001,64,1,64,1105,1,419,1002,64,2,64,109,-10,21101,42,0,-4,1008,1015,42,63,1005,63,445,4,425,1001,64,1,64,1105,1,445,1002,64,2,64,109,-5,1206,7,457,1105,1,463,4,451,1001,64,1,64,1002,64,2,64,109,-6,2107,34,-5,63,1005,63,479,1105,1,485,4,469,1001,64,1,64,1002,64,2,64,109,-8,2102,1,5,63,1008,63,23,63,1005,63,505,1106,0,511,4,491,1001,64,1,64,1002,64,2,64,109,5,2102,1,1,63,1008,63,21,63,1005,63,537,4,517,1001,64,1,64,1105,1,537,1002,64,2,64,109,15,21107,43,44,-6,1005,1014,555,4,543,1106,0,559,1001,64,1,64,1002,64,2,64,109,-6,1207,-7,38,63,1005,63,579,1001,64,1,64,1106,0,581,4,565,1002,64,2,64,109,-17,1201,4,0,63,1008,63,28,63,1005,63,601,1106,0,607,4,587,1001,64,1,64,1002,64,2,64,109,14,2107,31,-9,63,1005,63,625,4,613,1105,1,629,1001,64,1,64,1002,64,2,64,109,15,21102,44,1,-7,1008,1019,44,63,1005,63,651,4,635,1106,0,655,1001,64,1,64,1002,64,2,64,109,3,2105,1,-6,1106,0,673,4,661,1001,64,1,64,1002,64,2,64,109,-14,21101,45,0,2,1008,1017,42,63,1005,63,693,1105,1,699,4,679,1001,64,1,64,1002,64,2,64,109,5,21107,46,45,-8,1005,1012,719,1001,64,1,64,1105,1,721,4,705,1002,64,2,64,109,-19,2108,21,7,63,1005,63,737,1106,0,743,4,727,1001,64,1,64,1002,64,2,64,109,9,1207,-2,25,63,1005,63,761,4,749,1106,0,765,1001,64,1,64,1002,64,2,64,109,-10,1208,1,27,63,1005,63,783,4,771,1106,0,787,1001,64,1,64,1002,64,2,64,109,5,1202,4,1,63,1008,63,29,63,1005,63,807,1106,0,813,4,793,1001,64,1,64,1002,64,2,64,109,8,21102,47,1,0,1008,1013,50,63,1005,63,833,1106,0,839,4,819,1001,64,1,64,1002,64,2,64,109,-12,1202,8,1,63,1008,63,31,63,1005,63,865,4,845,1001,64,1,64,1105,1,865,1002,64,2,64,109,34,2106,0,-7,4,871,1105,1,883,1001,64,1,64,1002,64,2,64,109,-18,2105,1,7,4,889,1105,1,901,1001,64,1,64,4,64,99,21101,0,27,1,21101,915,0,0,1106,0,922,21201,1,13801,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2,-1,1,21102,942,1,0,1106,0,922,21201,1,0,-1,21201,-2,-3,1,21102,957,1,0,1105,1,922,22201,1,-1,-2,1106,0,968,21202,-2,1,-2,109,-3,2106,0,0]
	ops = aubreys_input.copy()
	# ops = [109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99]
	ops.extend([0] * ADDITTIONAL_MEMORY)
	i = 0
	offset = 0
	while i < len(ops):
		print(ops[i:i+5])
		op = ops[i]

		if op%100 in [1,2,4,5,6,7,8,9]:
			if   op >= 100 and str(op)[-3] in '2': param1 = ops[ops[i+1] + offset]
			elif op >= 100 and str(op)[-3] in '1': param1 = ops[i+1]
			else: 								   param1 = ops[ops[i+1]]
		if op%100 in [1,2,5,6,7,8]:
			if   op >= 1000 and str(op)[-4] in '2': param2 = ops[ops[i+2] + offset]
			elif op >= 1000 and str(op)[-4] in '1': param2 = ops[i+2]
			else: 									param2 = ops[ops[i+2]]
		if op%100 in [1,2,7,8]:
			param3 = ops[i+3]
			if  op >= 10_000 and str(op)[-5] in '2': param3 += offset


		if op%100 == 1:
			ops[param3] = param1 + param2
			i += 4
		elif op%100 == 2:
			ops[param3] = param1 * param2
			i += 4
		elif op%100 == 3:
			param1 = ops[i+1]
			if op >= 100 and str(op)[-3] in '2': param1 += offset
			if p != None:
				ops[param1] = p
				p = None
			else:
				ops[param1] = io.pop()
			i += 2
		elif op%100 == 4:
			yield param1
			i += 2
		elif op%100 == 5:
			 i = param2 if param1 else i+3
		elif op%100 == 6:
			 i = param2 if not param1 else i+3
		elif op%100 == 7:
			ops[param3] = 1 if param1 < param2 else 0
			i += 4
		elif op%100 == 8:
			ops[param3] = 1 if param1 == param2 else 0
			i += 4
		elif op%100 == 9:
			offset += param1
			i += 2
		elif op%100 == 99:
			return
		else:
			raise Exception(f'invalid operation: {ops[i]}')


def part1():
	for i, output in enumerate(intcode(1)):
		print(output)

		if i == 6: break

part1()

def part2():
	for output in intcode(2):
		print(output)

# part2()


# 34463338 wrong
